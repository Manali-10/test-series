####### SECTION 1 - C ----20 mins

1. WAP to write a fibonaci series from 1 to 100-------5 mins
2. WAP to find the prme number------------------------5 mins
3. WAP to which will detect whether a Machine is a little endian or big endian----5mins
4. WAP program to print the fllowing pattern:---------5 mins
    *
   ***
  *****
 *******
*********

####### SECTION 2 - DS -----10 mins

1. WAP to detect loop in the link list --------10 mins


####### SECTION 3 - OS ---- 25 mins

1. What is the difference between run time and load time libraries-----5 mins
2. What are the limitations of samaphores and how can they be overcomed----5 mins
3. What is the difference between detachable and joinable thread-----5 mins
4. what is a orphan process ---2 mins
5. What is the difference between signals and interrupts, list 5 signals---5 min

####### SECTION 4 - kernel space programming --- 10 mins

1. write a pseudo code to take command line arguements in a module ---5mins
2. write a pseudo code for char driver and create a user space pseudo code accessing it --5 mins


####### SECTION 5 - Linux build system --- 5 mins

1. write Linux build steps for x86 system --5 mins

####### SECTION 6 - Interview questions ---15 mins

1. Explain the difference between semaphore and Mutex ---5 mins
2. How will you synchronise 3 threads by using 3 semaphores ---5 mins
3. Explain the difference between malloc and calloc ---5 mins


ANSWERS : 

SECTION 1:
1. WAP to write a fibonaci series from 1 to 100-------5 mins
Ans:  int main(){
            int i,f=0,s=1,result;
            printf("fibonaci series from 1to 100\n");
            for(i=0;i<100;i++){
               if(i<=1){
                  result=i;
               }
               else{
                  result=f+s;
                  f=s;
                  s=result;
               }
               printf("%d \t",result);
            }
            return 0;
      }

2. WAP to find the prime number------------------------5 mins
Ans:  int main(){
         int no,i,result=0;
         printf("enter no\n");
         scanf("%d",&no);
         for(i=2;i<=no/2;i++){
            if(no/i!=0){
                  result=1;
                  break;
                  }
           } 
         if(result==0){
               printf("no is prime\n");
         }
         else{
               printf("no is not prime\n");
         }
      }


3. WAP to which will detect whether a Machine is a little endian or big endian----5mins
Ans:  int main(){
         int i=1;
         char *ptr;
         ptr=(char *)&i;
         if(*ptr){
            printf("little endian\n");
         }
         else{
            printf("big endian\n");
         }
      }


4. WAP program to print the fllowing pattern:---------5 mins
   *
  ***
 *****
*******
Ans:  int main(){
            int row,i,j,k;
            printf("no of rows\n");
            scanf("%d",&row);
            for(i=1;i<=row;i++,k=0){
                  for(j=1;j<=row-i){
                     printf(" ");
                  }
                  while(k!=2*i-1){
                     printf("*");
                  }
                  printf("\n");
            }
      }

SECTION 2:

1. WAP to detect loop in the link list --------10 mins
Ans:  int detect_loop(struct list *head){
            struct list *slow_ptr,*fast_ptr;
            slow_ptr=fast_ptr=head;
            while(slow_ptr&&fast_ptr&&fast_ptr->next){
                  slow_ptr=slow_ptr->next;
                  fast_ptr=fast_ptr->next->next;
                  if(slow_ptr==fast_ptr){
                        return 1;
                  }
            }
            return 0;
      }
      
      int main(){
         ret=detect_loop(head);
         if(ret==1){
            printf("loop detect\n");
         }
         else{
            printf("loop is not detect\n");
         }
         return 0;
      }



SECTION 3:
1. What is the difference between run time and load time libraries-----5 mins
Ans:  1.load time : load time linkage does not allow an application process to unlink a library.
        run time  : run time linkage an application can unlink a library at any time.

      2.load time : some situation load time linkage cause westage of memory.
        run time  : there is no westage of memory.


2. What are the limitations of samaphores and how can they be overcomed----5 mins
Ans: 1.Deadlock will happen in semaphore. to overcomed wait and signal in correct order.
     2.it is not work priority vias. it is work in fifo order.


3. What is the difference between detachable and joinable thread-----5 mins
Ans:joinable : this thread are join to other thread i.e other thread wait till complete this thread.
    detachable : this thread perfrom independently it is not return any thing to other thread.
    
4. what is a orphan process ---2 mins
Ans. that process thuse parent is no more exit.  i.e process parent finish early or terminate accientdly.

5. What is the difference between signals and interrupts, list 5 signals---5 min
Ans: signal : event triggred by cpu or softer that run on cpu.
     interrupt : event triggred by external component other than cpu and that alert the cpu to perform task.
     
     signal: depend on os.
     interrupt : depend on the platfrom.
     
     signal: event can be synchronus or asynchronous
     intrrupt : event cab be asynchronous.
     
     signal : uses pre process signal mask
     interrupt : uses pre cpu interrupt mask
     
     
     
   SECTION 4:
   1. write a pseudo code to take command line arguements in a module ---5mins
   Ans : step1 : create a globle veriable .
         step2 : use module_param(variable,variable type,parmission);
         
   
   2. write a pseudo code for char driver and create a user space pseudo code accessing it --5 mins
   Ans : #define MAJORNO 190
      #define MINARNO 0

      static dev_t mydev;
      struct cdev *mycdev;

      int __init my_init(void){
         int ret;
         1.create device number and register it. 
         mydev=MKDEV(MAJORNO,MINARNO);
         ret=register_chrdev_region(mydev,1,"mydriver");

         2. allocate memmory for character driver.
         mycdev=cdev_alloc();

         3. initilaze with file operation.
         cdev_init(mycdev,fops);

         4. add to vfs
         cdev_add(mycdev,mydev,1);

         return 0;
      }

      int __exit my_exit(){
         1. dellocate memmory
         cdev_del(mycdev);

         2.unregister devcie number.
         unregister_chrdev_region(mydev);
      }
      
 SECTION 5:
 1. write Linux build steps for x86 system --5 mins
 Ans : step 1 : install latest linux
       step 2 : untar linux and cd linux
       step 3 : make menuconfig
       step 4 : make 
       step 5 : make module_install
       step 6 : make install
       step 7 : reboot
       step 8 : select your linux
       

SECTION 6:
1. Explain the difference between semaphore and Mutex ---5 mins
Ans : semaphore : signaling mechanism.	
      Mutex     : locking mechanism.
      
      semaphore : have multiple program threads.
      Mutex     : have multiple program threads but not work simultanously
    
      semaphore : if resorce is not free then it is excute wait operation. it is wait untill the count should greater then 0.
      Mutex     : if resorce is not free then it is go to wait queue untill the unlock.
      
      
 3. Explain the difference between malloc and calloc ---5 mins
 Ans : both are use for dynamically memmory allocation.
      but differece is whenever you allocate memory with calloc they initialize with 0 other hand malloc not initize with 0 they have garbage value.
    
      
 
     
